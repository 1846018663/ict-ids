server.port=8080
#mysql
#测试环境  101.37.147.201  root    Hive.lab123
#mysql  172.16.0.152  ict_ids     !QAZ2wsx
spring.datasource.url=jdbc:mysql://101.37.147.201:3306/ict_ids?useUnicode=true&characterEncoding=utf-8&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
spring.datasource.username=root
spring.datasource.password=Hive.lab123
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

#mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl





################################Redid###########################
# redis配置
spring.redis.port=8087
spring.redis.host=101.37.147.201

#根据车辆id保存车辆定位信息
map.redis.car.positioning=hnu:ids:map:ict:carPositioningData:
#根据行程编号保存车辆状态信息
map.redis.car.travel.status=hnu:ids:map:ict:travelStatusData:
#根据行程编号_站台编号保存信息
map.redis.car.outbound=hnu:ids:map:ict:outboundData:
#根据车里id保存信息
map.redis.car.suspend=hnu:ids:map:ict:suspendData:
#根据车里id保存信息
map.redis.car.suspend.end=hnu:ids:map:ict:suspendEndData:
#根据车辆id保存查询信息
map.redis.car.fault=hnu:ids:map:ict:faultData:
#根据车辆id保存查询信息
map.redis.car.state=hnu:ids:map:ict:stateData:




#############################同济算法接口地址#########################
#调度算法请求地址
travel.algorithm.url=http://47.111.139.187:5000/algorithm
#取消行程调度算法地址
travel.algorithm.cancels.url=http://47.111.139.187:5000/algorithmC
#加入已有行程调度算法地址
travel.algorithm.add.url=http://47.111.139.187:5000/algorithmA
#快速访问接口
travel.algorithm.response.url=http://47.111.139.187:5000/algorithmD
#获取座位编号
travel.algorithm.seat.url=http://47.111.139.187:5000/seat_allocation
#获取路劲规划与距离
travel.algorithm.planning.url=http://47.111.139.187:5000/path_planning
#包车算法调用接口
travel.algorithm.charter.url= http://47.111.139.187:5000/CharterCar
#站台路网信息更新
travel.algorithm.update.platform.url=http://47.111.139.187:5000/info_update
#取消预约接口（运力预约与包车业务预约）
travel.algorithm.cancel.charterCar.url=http://47.111.139.187:5000/ CancelCharterCar
#包车业务员获取座位号
travel.algorithm.charterCar.seat.url=http://47.111.139.187:5000/seat_allocation_for_charetercar
#取消包车业务与运力是否满足取消释放汽车资源接口
travel.algorithm.cancel.car.url=http://47.111.139.187:5000/CancelCharterCar
#司机信息更新
travel.algorithm.diriverinfo.update.url=http://47.111.139.187:5000/driverinfo_update



#############################德鑫乘客服务系统接口地址#########################
#乘客服务 行程预约成功后的返回地址
passenger.service.callback.url=https://applets.dxzhcl.com/order/updateorder
#乘客服务  运载能力检测接口
passenger.service.capacity.test.url=https://applets.dxzhcl.com/order/orderResult
#乘客服务预警接口
passenger.service.early.warning.push.url=https://applets.dxzhcl.com/message/prealert/publish
#乘客服务系统包车信息回调
passenger.service.charteredBus.Callback.url=https://applets.dxzhcl.com/order/charteredBusCallback
#乘客服务预警接口  appId
passenger.service.app_id=dxzh20210408schedule



######################大数据平台接口#################################\
#车辆信息
big.data.getCarInfo.url=http://121.43.140.191:8081/smartcarset/public/ops/vehicle
#司机信息
big.data.getDriverInfo.url=http://121.43.140.191:8081/smartcarset/public/ops/driver
#站点信息
big.data.getPlatformInfo.url=http://121.43.140.191:8081/smartcarset/public/ops/station


#============== kafka ===================
# 指定kafka server的地址，集群配多个，中间，逗号隔开
spring.kafka.bootstrap-servers=121.43.140.191:9092


#=============== consumer  =======================
# 指定默认消费者group id --> 由于在kafka中，同一组中的consumer不会读取到同一个消息，依靠groud.id设置组名
spring.kafka.consumer.group-id=testGroupIds
# smallest和largest才有效，如果smallest重新0开始读取，如果是largest从logfile的offset读取。一般情况下我们都是设置smallest
spring.kafka.consumer.auto-offset-reset=earliest
# enable.auto.commit:true --> 设置自动提交offset
spring.kafka.consumer.enable-auto-commit=true
#如果'enable.auto.commit'为true，则消费者偏移自动提交给Kafka的频率（以毫秒为单位），默认值为5000。
spring.kafka.consumer.auto-commit-interval=100

# 指定消息key和消息体的编解码方式
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

#=============== provider  =======================
# 写入失败时，重试次数。当leader节点失效，一个repli节点会替代成为leader节点，此时可能出现写入失败，
# 当retris为0时，produce不会重复。retirs重发，此时repli节点完全成为leader节点，不会产生消息丢失。
spring.kafka.producer.retries=0
# 每次批量发送消息的数量,produce积累到一定数据，一次发送
spring.kafka.producer.batch-size=16384
# produce积累数据一次发送，缓存大小达到buffer.memory就发送数据
spring.kafka.producer.buffer-memory=33554432

#procedure要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端的持久化，其值可以为如下：
#acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
#acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
#acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
#可以设置的值为：all, -1, 0, 1
spring.kafka.producer.acks=1

# 指定消息key和消息体的编解码方式
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer